plugins {
    id 'fabric-loom' version '1.1.+'
    id 'maven-publish'
    id 'idea'
}

archivesBaseName = "${mod_name}-fabric-${minecraft_version}"

repositories {
    maven {
        name = 'TerraformersMC'
        url = 'https://maven.terraformersmc.com/'
        content {
            includeGroup 'dev.emi'
        }
    }
    maven {
        name = 'Ladysnake'
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
        content {
            includeGroupByRegex 'dev\\.onyxstudios.+'
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}+${minecraft_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    compileOnly project(":Common")

    include modApi('teamreborn:energy:3.0.0') {
        exclude(group: 'net.fabricmc.fabric-api')
    }

    include(implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-fabric:${mixinextras_version}")))
    include(implementation("io.github.matyrobbrt:eventdispatcher:${eventdispatcher_version}"))
    include("io.github.matyrobbrt:asmutils:${asmutils_version}")

    modImplementation("dev.emi:trinkets:${trinkets_version}") {
        exclude(group: 'net.fabricmc')
    }
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}"
}

loom {
    mixin {
        add('main', 'placebo.refmap.json') {
            include 'placebo.mixins.json'
            include 'placebo_fabric.mixins.json'
        }
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
    accessWidenerPath.set(file('../Common/src/main/resources/placebo.accesswidener'))
}


processResources {
    from project(":Common").sourceSets.main.resources
    from(file('../Forge/src/generated/resources')) {
        exclude '.cache/**'
    }
    filesMatching("${mod_id}.mixins.json") {
        expand "refmap_target": "${mod_id}."
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":Common").sourceSets.main.allSource)
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            groupId = 'shadows.placebo'
            artifactId = "placebo-${minecraft_version}-fabric"
            version = project.version
            from components.java

            pom {
                withXml { XmlProvider xml ->
                    final element = xml.asElement()
                    for (int i = 0; i < element.childNodes.length; i++) {
                        final child = element.childNodes.item(i)
                        if (child.nodeName == 'dependencies')
                            element.removeChild(child)
                    }

                    final createDependency = { org.w3c.dom.Document owner, String group, String name, String version, String scope ->
                        var sub = owner.createElement('dependency')

                        var groupEl = owner.createElement('groupId')
                        groupEl.appendChild(owner.createTextNode(group))
                        sub.appendChild groupEl

                        var artEl = owner.createElement('artifactId')
                        artEl.appendChild(owner.createTextNode(name))
                        sub.appendChild artEl

                        var verEl = owner.createElement('version')
                        verEl.appendChild(owner.createTextNode(version))
                        sub.appendChild verEl

                        var scopeEl = owner.createElement('scope')
                        scopeEl.appendChild(owner.createTextNode(scope))
                        sub.appendChild scopeEl

                        return sub
                    }

                    final depsElem = element.getOwnerDocument().createElement('dependencies')
                    final owner = element.getOwnerDocument()
                    depsElem.appendChild(createDependency(owner, 'io.github.matyrobbrt', 'eventdispatcher', "${eventdispatcher_version}", 'compile'))
                    depsElem.appendChild(createDependency(owner, 'com.github.llamalad7.mixinextras', 'mixinextras-fabric', "${mixinextras_version}", 'runtime'))
                    element.appendChild(depsElem)
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}
